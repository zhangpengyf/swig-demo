/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#import <Foundation/Foundation.h>
#include <stdlib.h>
#include <string.h>


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) { /*throw exception*/ return nullreturn; } else


/* Support for throwing Objc exceptions */
typedef enum {
  SWIG_ObjcOutOfMemoryError = 1, 
  SWIG_ObjcIOException, 
  SWIG_ObjcRuntimeException, 
  SWIG_ObjcIndexOutOfBoundsException,
  SWIG_ObjcArithmeticException,
  SWIG_ObjcIllegalArgumentException,
  SWIG_ObjcNullPointerException,
  SWIG_ObjcDirectorPureVirtual,
  SWIG_ObjcUnknownError
} SWIG_ObjcExceptionCodes;

typedef struct {
  SWIG_ObjcExceptionCodes code;
  const char *Objc_exception;
} SWIG_ObjcExceptions_t;


static void SWIGUNUSED SWIG_ObjcThrowException(SWIG_ObjcExceptionCodes code, const char *msg) {
  static const SWIG_ObjcExceptions_t Objc_exceptions[] = {
    { SWIG_ObjcOutOfMemoryError, "OutOfMemoryError" },
    { SWIG_ObjcIOException, "IOException" },
    { SWIG_ObjcRuntimeException, "RuntimeException" },
    { SWIG_ObjcIndexOutOfBoundsException, "IndexOutOfBoundsException" },
    { SWIG_ObjcArithmeticException, "ArithmeticException" },
    { SWIG_ObjcIllegalArgumentException, "IllegalArgumentException" },
    { SWIG_ObjcNullPointerException, "NullPointerException" },
    { SWIG_ObjcDirectorPureVirtual, "RuntimeException" },
    { SWIG_ObjcUnknownError,  "UnknownError" },
    { (SWIG_ObjcExceptionCodes)0,  "UnknownError" }
  };
  const SWIG_ObjcExceptions_t *except_ptr = Objc_exceptions;
  while (except_ptr->code != code && except_ptr->code)
   except_ptr++;
}

#include "truman_wrap.h"

#include "../engine.h""


#ifdef __cplusplus
extern "C" {
#endif

void _wrap_EngineConfig_video_port_set(void* imarg1, int imarg2)
{
  truman::EngineConfig *arg1 = (truman::EngineConfig *) 0 ;
  int arg2 ;
  
  arg1 = (truman::EngineConfig *)imarg1; 
  arg2 = (int)imarg2; 
  if (arg1) (arg1)->video_port = arg2;
}

int _wrap_EngineConfig_video_port_get(void* imarg1)
{
  truman::EngineConfig *arg1 = (truman::EngineConfig *) 0 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (truman::EngineConfig *)imarg1; 
  result = (int) ((arg1)->video_port);
  imresult = result; 
  return imresult;
}

void _wrap_EngineConfig_audio_port_set(void* imarg1, int imarg2)
{
  truman::EngineConfig *arg1 = (truman::EngineConfig *) 0 ;
  int arg2 ;
  
  arg1 = (truman::EngineConfig *)imarg1; 
  arg2 = (int)imarg2; 
  if (arg1) (arg1)->audio_port = arg2;
}

int _wrap_EngineConfig_audio_port_get(void* imarg1)
{
  truman::EngineConfig *arg1 = (truman::EngineConfig *) 0 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (truman::EngineConfig *)imarg1; 
  result = (int) ((arg1)->audio_port);
  imresult = result; 
  return imresult;
}

void* _wrap_new_EngineConfig()
{
  void* imresult = 0 ;
  truman::EngineConfig *result = 0 ;
  
  result = (truman::EngineConfig *)new truman::EngineConfig();
  imresult = (void*)result; 
  return imresult;
}

void _wrap_delete_EngineConfig(void* imarg1)
{
  truman::EngineConfig *arg1 = (truman::EngineConfig *) 0 ;
  
  arg1 = (truman::EngineConfig *)imarg1; 
  delete arg1;
}

void _wrap_EngineStatus_rtt_set(void* imarg1, int imarg2)
{
  truman::EngineStatus *arg1 = (truman::EngineStatus *) 0 ;
  int arg2 ;
  
  arg1 = (truman::EngineStatus *)imarg1; 
  arg2 = (int)imarg2; 
  if (arg1) (arg1)->rtt = arg2;
}

int _wrap_EngineStatus_rtt_get(void* imarg1)
{
  truman::EngineStatus *arg1 = (truman::EngineStatus *) 0 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (truman::EngineStatus *)imarg1; 
  result = (int) ((arg1)->rtt);
  imresult = result; 
  return imresult;
}

void _wrap_EngineStatus_isRunning_set(void* imarg1, BOOL imarg2)
{
  truman::EngineStatus *arg1 = (truman::EngineStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (truman::EngineStatus *)imarg1; 
  arg2 = imarg2? true : false; 
  if (arg1) (arg1)->isRunning = arg2;
}

BOOL _wrap_EngineStatus_isRunning_get(void* imarg1)
{
  truman::EngineStatus *arg1 = (truman::EngineStatus *) 0 ;
  BOOL imresult = 0 ;
  bool result;
  
  arg1 = (truman::EngineStatus *)imarg1; 
  result = (bool) ((arg1)->isRunning);
  imresult = (result)? YES:NO; 
  return imresult;
}

void _wrap_EngineStatus_status_set(void* imarg1, void* imarg2)
{
  truman::EngineStatus *arg1 = (truman::EngineStatus *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  arg1 = (truman::EngineStatus *)imarg1; 
  
  argp2 = (std::string *)imarg2;
  arg2 = *argp2; 
  
  if (arg1) (arg1)->status = arg2;
}

void* _wrap_EngineStatus_status_get(void* imarg1)
{
  truman::EngineStatus *arg1 = (truman::EngineStatus *) 0 ;
  void* imresult = 0 ;
  std::string *temp ;
  std::string result;
  
  arg1 = (truman::EngineStatus *)imarg1; 
  result =  ((arg1)->status);
  
  temp = new std::string((const std::string &)result); 
  imresult = (void*)temp;
  
  return imresult;
}

void* _wrap_new_EngineStatus()
{
  void* imresult = 0 ;
  truman::EngineStatus *result = 0 ;
  
  result = (truman::EngineStatus *)new truman::EngineStatus();
  imresult = (void*)result; 
  return imresult;
}

void _wrap_delete_EngineStatus(void* imarg1)
{
  truman::EngineStatus *arg1 = (truman::EngineStatus *) 0 ;
  
  arg1 = (truman::EngineStatus *)imarg1; 
  delete arg1;
}

void _wrap_EngineCallback_OnHelloWorld(void* imarg1, void* imarg2)
{
  truman::EngineCallback *arg1 = (truman::EngineCallback *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  arg1 = (truman::EngineCallback *)imarg1; 
  
  argp2 = (std::string *)imarg2;
  arg2 = *argp2; 
  
  (arg1)->OnHelloWorld(arg2);
}

void _wrap_EngineCallback_OnEngineStatus(void* imarg1, void* imarg2)
{
  truman::EngineCallback *arg1 = (truman::EngineCallback *) 0 ;
  truman::EngineStatus *arg2 = 0 ;
  
  arg1 = (truman::EngineCallback *)imarg1; 
  arg2 = (truman::EngineStatus *)imarg2; 
  (arg1)->OnEngineStatus((truman::EngineStatus const &)*arg2);
}

void _wrap_delete_EngineCallback(void* imarg1)
{
  truman::EngineCallback *arg1 = (truman::EngineCallback *) 0 ;
  
  arg1 = (truman::EngineCallback *)imarg1; 
  delete arg1;
}

int _wrap_Engine_InitEngine(void* imarg1, void* imarg2)
{
  truman::Engine *arg1 = (truman::Engine *) 0 ;
  truman::EngineConfig *arg2 = 0 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (truman::Engine *)imarg1; 
  arg2 = (truman::EngineConfig *)imarg2; 
  result = (int)(arg1)->InitEngine((truman::EngineConfig const &)*arg2);
  imresult = result; 
  return imresult;
}

void _wrap_Engine_SetEngineCallback(void* imarg1, void* imarg2)
{
  truman::Engine *arg1 = (truman::Engine *) 0 ;
  truman::EngineCallback *arg2 = (truman::EngineCallback *) 0 ;
  
  arg1 = (truman::Engine *)imarg1; 
  arg2 = (truman::EngineCallback *)imarg2; 
  (arg1)->SetEngineCallback(arg2);
}

int _wrap_Engine_Run(void* imarg1)
{
  truman::Engine *arg1 = (truman::Engine *) 0 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (truman::Engine *)imarg1; 
  result = (int)(arg1)->Run();
  imresult = result; 
  return imresult;
}

void* _wrap_new_Engine()
{
  void* imresult = 0 ;
  truman::Engine *result = 0 ;
  
  result = (truman::Engine *)new truman::Engine();
  imresult = (void*)result; 
  return imresult;
}

void _wrap_delete_Engine(void* imarg1)
{
  truman::Engine *arg1 = (truman::Engine *) 0 ;
  
  arg1 = (truman::Engine *)imarg1; 
  delete arg1;
}



#ifdef __cplusplus
}
#endif
