/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */
#include "truman_proxy.h"
#include "truman_wrap.h"


@implementation SWIGTYPE_std__string
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

@end


@implementation EngineConfig
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

-(void)setVideo_port: (int)value
{
 _wrap_EngineConfig_video_port_set([self getCptr], value);
}

-(int)getVideo_port
{
  return _wrap_EngineConfig_video_port_get([self getCptr]); 
}

-(void)setAudio_port: (int)value
{
 _wrap_EngineConfig_audio_port_set([self getCptr], value);
}

-(int)getAudio_port
{
  return _wrap_EngineConfig_audio_port_get([self getCptr]); 
}

-(id)init
{
 
	if((self = [super init])) {
		void* cptr = _wrap_new_EngineConfig();
        swigCPtr = cptr;
        swigCMemOwn = YES;
	}
	return self;

}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_EngineConfig((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end


@implementation EngineStatus
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

-(void)setRtt: (int)value
{
 _wrap_EngineStatus_rtt_set([self getCptr], value);
}

-(int)getRtt
{
  return _wrap_EngineStatus_rtt_get([self getCptr]); 
}

-(void)setIsRunning: (BOOL)value
{
 _wrap_EngineStatus_isRunning_set([self getCptr], value);
}

-(BOOL)getIsRunning
{
  return _wrap_EngineStatus_isRunning_get([self getCptr]); 
}

-(void)setStatus: (SWIGTYPE_std__string*)value
{
 _wrap_EngineStatus_status_set([self getCptr], [value getCptr]);
}

-(SWIGTYPE_std__string*)getStatus
{
    void* cPtr = _wrap_EngineStatus_status_get([self getCptr]);
     SWIGTYPE_std__string* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_std__string alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(id)init
{
 
	if((self = [super init])) {
		void* cptr = _wrap_new_EngineStatus();
        swigCPtr = cptr;
        swigCMemOwn = YES;
	}
	return self;

}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_EngineStatus((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end


@implementation EngineCallback
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

-(void)OnHelloWorld: (SWIGTYPE_std__string*)arg1
{
 _wrap_EngineCallback_OnHelloWorld([self getCptr], [arg1 getCptr]);
}

-(void)OnEngineStatus: (EngineStatus*)status
{
 _wrap_EngineCallback_OnEngineStatus([self getCptr], [status getCptr]);
}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_EngineCallback((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end


@implementation Engine
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

-(int)InitEngine: (EngineConfig*)config
{
  return _wrap_Engine_InitEngine([self getCptr], [config getCptr]); 
}

-(void)SetEngineCallback: (EngineCallback*)callback
{
 _wrap_Engine_SetEngineCallback([self getCptr], [callback getCptr]);
}

-(int)Run
{
  return _wrap_Engine_Run([self getCptr]); 
}

-(id)init
{
 
	if((self = [super init])) {
		void* cptr = _wrap_new_Engine();
        swigCPtr = cptr;
        swigCMemOwn = YES;
	}
	return self;

}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_Engine((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end

