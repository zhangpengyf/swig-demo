/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef EXAMPLE_WRAP_H
#define EXAMPLE_WRAP_H


#ifdef __cplusplus
extern "C" {
#endif

void _wrap_ActionContext_Token_set(void* imarg1, void* imarg2);
void* _wrap_ActionContext_Token_get(void* imarg1);
void* _wrap_new_ActionContext();
void _wrap_delete_ActionContext(void* imarg1);
void _wrap_WBPencilPosData_SendTime_set(void* imarg1, void* imarg2);
void* _wrap_WBPencilPosData_SendTime_get(void* imarg1);
void _wrap_WBPencilPosData_PenType_set(void* imarg1, void* imarg2);
void* _wrap_WBPencilPosData_PenType_get(void* imarg1);
void _wrap_WBPencilPosData_XOffset_set(void* imarg1, void* imarg2);
void* _wrap_WBPencilPosData_XOffset_get(void* imarg1);
void _wrap_WBPencilPosData_YOffset_set(void* imarg1, void* imarg2);
void* _wrap_WBPencilPosData_YOffset_get(void* imarg1);
void* _wrap_new_WBPencilPosData();
void _wrap_delete_WBPencilPosData(void* imarg1);
void _wrap_WBDocumentData_SendTime_set(void* imarg1, void* imarg2);
void* _wrap_WBDocumentData_SendTime_get(void* imarg1);
void _wrap_WBDocumentData_Type_set(void* imarg1, void* imarg2);
void* _wrap_WBDocumentData_Type_get(void* imarg1);
void _wrap_WBDocumentData_TotalPage_set(void* imarg1, void* imarg2);
void* _wrap_WBDocumentData_TotalPage_get(void* imarg1);
void _wrap_WBDocumentData_CurrentPage_set(void* imarg1, void* imarg2);
void* _wrap_WBDocumentData_CurrentPage_get(void* imarg1);
void _wrap_WBDocumentData_CurrentPageMd5_set(void* imarg1, NSString* imarg2);
NSString* _wrap_WBDocumentData_CurrentPageMd5_get(void* imarg1);
void* _wrap_new_WBDocumentData();
void _wrap_delete_WBDocumentData(void* imarg1);
void _wrap_WBOperationItem_ClientSeq_set(void* imarg1, void* imarg2);
void* _wrap_WBOperationItem_ClientSeq_get(void* imarg1);
void _wrap_WBOperationItem_ServerSeq_set(void* imarg1, void* imarg2);
void* _wrap_WBOperationItem_ServerSeq_get(void* imarg1);
void _wrap_WBOperationItem_Data_set(void* imarg1, void* imarg2);
void* _wrap_WBOperationItem_Data_get(void* imarg1);
void* _wrap_new_WBOperationItem();
void _wrap_delete_WBOperationItem(void* imarg1);
void _wrap_WBOperationData_SendTime_set(void* imarg1, void* imarg2);
void* _wrap_WBOperationData_SendTime_get(void* imarg1);
void _wrap_WBOperationData_BGMd5_set(void* imarg1, NSString* imarg2);
NSString* _wrap_WBOperationData_BGMd5_get(void* imarg1);
void _wrap_WBOperationData_Operation_set(void* imarg1, int imarg2);
int _wrap_WBOperationData_Operation_get(void* imarg1);
void _wrap_WBOperationData_Items_set(void* imarg1, void* imarg2);
void* _wrap_WBOperationData_Items_get(void* imarg1);
void* _wrap_new_WBOperationData();
void _wrap_delete_WBOperationData(void* imarg1);
void _wrap_ClassQuestion_QuestionId_set(void* imarg1, void* imarg2);
void* _wrap_ClassQuestion_QuestionId_get(void* imarg1);
void _wrap_ClassQuestion_UserId_set(void* imarg1, void* imarg2);
void* _wrap_ClassQuestion_UserId_get(void* imarg1);
void _wrap_ClassQuestion_Type_set(void* imarg1, int imarg2);
int _wrap_ClassQuestion_Type_get(void* imarg1);
void _wrap_ClassQuestion_Title_set(void* imarg1, NSString* imarg2);
NSString* _wrap_ClassQuestion_Title_get(void* imarg1);
void _wrap_ClassQuestion_Content_set(void* imarg1, NSString* imarg2);
NSString* _wrap_ClassQuestion_Content_get(void* imarg1);
void _wrap_ClassQuestion_Options_set(void* imarg1, void* imarg2);
void* _wrap_ClassQuestion_Options_get(void* imarg1);
void _wrap_ClassQuestion_CorrectOptions_set(void* imarg1, void* imarg2);
void* _wrap_ClassQuestion_CorrectOptions_get(void* imarg1);
void* _wrap_new_ClassQuestion();
void _wrap_delete_ClassQuestion(void* imarg1);
void _wrap_ClassAnswer_QuestionId_set(void* imarg1, void* imarg2);
void* _wrap_ClassAnswer_QuestionId_get(void* imarg1);
void _wrap_ClassAnswer_UserId_set(void* imarg1, void* imarg2);
void* _wrap_ClassAnswer_UserId_get(void* imarg1);
void _wrap_ClassAnswer_AnswerIdx_set(void* imarg1, void* imarg2);
void* _wrap_ClassAnswer_AnswerIdx_get(void* imarg1);
void* _wrap_new_ClassAnswer();
void _wrap_delete_ClassAnswer(void* imarg1);
void _wrap_delete_Callback(void* imarg1);
void _wrap_Callback_run(void* imarg1);
void* _wrap_new_Callback();
void* _wrap_new_Caller();
void _wrap_delete_Caller(void* imarg1);
void _wrap_Caller_delCallback(void* imarg1);
void _wrap_Caller_setCallback(void* imarg1, void* imarg2);
void _wrap_Caller_call(void* imarg1);
void _wrap_delete_Test(void* imarg1);
void* _wrap_EventArgs_getVector(void* imarg1);
NSString* _wrap_EventArgs_GetName(void* imarg1);
NSString* _wrap_EventArgs_StaticName();
void* _wrap_new_EventArgs();
void _wrap_delete_EventArgs(void* imarg1);
NSString* _wrap_ACEventArgs_TypeName();
void* _wrap_ACEventArgs_Id(void* imarg1);
BOOL _wrap_ACEventArgs_IsProcessed(void* imarg1);
BOOL _wrap_ACEventArgs_MakeProcessed(void* imarg1);
NSString* _wrap_ACEventArgs_EventName(void* imarg1);
void _wrap_delete_ACEventArgs(void* imarg1);
void _wrap_ActionStateEventArgs_Status_set(void* imarg1, int imarg2);
int _wrap_ActionStateEventArgs_Status_get(void* imarg1);
void _wrap_ActionStateEventArgs_Token_set(void* imarg1, void* imarg2);
void* _wrap_ActionStateEventArgs_Token_get(void* imarg1);
void _wrap_delete_ActionStateEventArgs(void* imarg1);
void* _wrap_new_CallerVector();
unsigned long _wrap_CallerVector_size(void* imarg1);
unsigned long _wrap_CallerVector_capacity(void* imarg1);
void _wrap_CallerVector_reserve(void* imarg1, unsigned long imarg2);
BOOL _wrap_CallerVector_isEmpty(void* imarg1);
void _wrap_CallerVector_clear(void* imarg1);
void _wrap_CallerVector_add(void* imarg1, void* imarg2);
void* _wrap_CallerVector_get(void* imarg1, int imarg2);
void _wrap_CallerVector_set(void* imarg1, int imarg2, void* imarg3);
void _wrap_delete_CallerVector(void* imarg1);

#ifdef __cplusplus
}
#endif

#endif

