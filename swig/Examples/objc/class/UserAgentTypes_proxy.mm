/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */
#include "UserAgentTypes_proxy.h"
#include "UserAgentTypes_wrap.h"


@implementation SWIGTYPE_p_std__vectorT_AC__Talk__WBOperationItem_t
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

@end


@implementation SWIGTYPE_p_std__vectorT_std__string_t
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

@end


@implementation SWIGTYPE_p_AC__Talk__Service__ACService
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

@end


@implementation SWIGTYPE_p_AC__Talk__Service__ConfigService
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

@end


@implementation SWIGTYPE_p_AC__Talk__Service__CourseService
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

@end


@implementation SWIGTYPE_p_AC__Talk__Service__LogService
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

@end


@implementation SWIGTYPE_p_std__vectorT_char_t
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

@end


@implementation SWIGTYPE_p_std__vectorT_unsigned_char_t
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

@end


@implementation SWIGTYPE_p_void
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

@end


@implementation SWIGTYPE_unsigned___int64
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

@end

int NULL= 0;

@implementation ActionContext
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

-(void)setToken: (SWIGTYPE_p_void*)value
{
 _wrap_ActionContext_Token_set([self getCptr], [value getCptr]);
}

-(SWIGTYPE_p_void*)getToken
{
    void* cPtr = _wrap_ActionContext_Token_get([self getCptr]);
     SWIGTYPE_p_void* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_p_void alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(id)init
{
 
	if((self = [super init])) {
		void* cptr = _wrap_new_ActionContext();
        swigCPtr = cptr;
        swigCMemOwn = YES;
	}
	return self;

}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_ActionContext((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end


@implementation WBPencilPosData
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

-(void)setSendTime: (SWIGTYPE_unsigned___int64*)value
{
 _wrap_WBPencilPosData_SendTime_set([self getCptr], [value getCptr]);
}

-(SWIGTYPE_unsigned___int64*)getSendTime
{
    void* cPtr = _wrap_WBPencilPosData_SendTime_get([self getCptr]);
     SWIGTYPE_unsigned___int64* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_unsigned___int64 alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(void)setPenType: (unsigned char)value
{
 _wrap_WBPencilPosData_PenType_set([self getCptr], value);
}

-(unsigned char)getPenType
{
  return _wrap_WBPencilPosData_PenType_get([self getCptr]); 
}

-(void)setXOffset: (unsigned int)value
{
 _wrap_WBPencilPosData_XOffset_set([self getCptr], value);
}

-(unsigned int)getXOffset
{
  return _wrap_WBPencilPosData_XOffset_get([self getCptr]); 
}

-(void)setYOffset: (unsigned int)value
{
 _wrap_WBPencilPosData_YOffset_set([self getCptr], value);
}

-(unsigned int)getYOffset
{
  return _wrap_WBPencilPosData_YOffset_get([self getCptr]); 
}

-(id)init
{
 
	if((self = [super init])) {
		void* cptr = _wrap_new_WBPencilPosData();
        swigCPtr = cptr;
        swigCMemOwn = YES;
	}
	return self;

}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_WBPencilPosData((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end


@implementation WBDocumentData
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

-(void)setSendTime: (SWIGTYPE_unsigned___int64*)value
{
 _wrap_WBDocumentData_SendTime_set([self getCptr], [value getCptr]);
}

-(SWIGTYPE_unsigned___int64*)getSendTime
{
    void* cPtr = _wrap_WBDocumentData_SendTime_get([self getCptr]);
     SWIGTYPE_unsigned___int64* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_unsigned___int64 alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(void)setType: (unsigned char)value
{
 _wrap_WBDocumentData_Type_set([self getCptr], value);
}

-(unsigned char)getType
{
  return _wrap_WBDocumentData_Type_get([self getCptr]); 
}

-(void)setTotalPage: (unsigned short)value
{
 _wrap_WBDocumentData_TotalPage_set([self getCptr], value);
}

-(unsigned short)getTotalPage
{
  return _wrap_WBDocumentData_TotalPage_get([self getCptr]); 
}

-(void)setCurrentPage: (unsigned short)value
{
 _wrap_WBDocumentData_CurrentPage_set([self getCptr], value);
}

-(unsigned short)getCurrentPage
{
  return _wrap_WBDocumentData_CurrentPage_get([self getCptr]); 
}

-(void)setCurrentPageMd5: (NSString*)value
{
 _wrap_WBDocumentData_CurrentPageMd5_set([self getCptr], value);
}

-(NSString*)getCurrentPageMd5
{
 {
    return _wrap_WBDocumentData_CurrentPageMd5_get([self getCptr]);
  }
}

-(id)init
{
 
	if((self = [super init])) {
		void* cptr = _wrap_new_WBDocumentData();
        swigCPtr = cptr;
        swigCMemOwn = YES;
	}
	return self;

}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_WBDocumentData((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end


@implementation WBOperationItem
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

-(void)setClientSeq: (unsigned int)value
{
 _wrap_WBOperationItem_ClientSeq_set([self getCptr], value);
}

-(unsigned int)getClientSeq
{
  return _wrap_WBOperationItem_ClientSeq_get([self getCptr]); 
}

-(void)setServerSeq: (unsigned int)value
{
 _wrap_WBOperationItem_ServerSeq_set([self getCptr], value);
}

-(unsigned int)getServerSeq
{
  return _wrap_WBOperationItem_ServerSeq_get([self getCptr]); 
}

-(void)setData: (SWIGTYPE_p_std__vectorT_char_t*)value
{
 _wrap_WBOperationItem_Data_set([self getCptr], [value getCptr]);
}

-(SWIGTYPE_p_std__vectorT_char_t*)getData
{
    void* cPtr = _wrap_WBOperationItem_Data_get([self getCptr]);
     SWIGTYPE_p_std__vectorT_char_t* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_p_std__vectorT_char_t alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(id)init
{
 
	if((self = [super init])) {
		void* cptr = _wrap_new_WBOperationItem();
        swigCPtr = cptr;
        swigCMemOwn = YES;
	}
	return self;

}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_WBOperationItem((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end


@implementation WBOperationData
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

-(void)setSendTime: (SWIGTYPE_unsigned___int64*)value
{
 _wrap_WBOperationData_SendTime_set([self getCptr], [value getCptr]);
}

-(SWIGTYPE_unsigned___int64*)getSendTime
{
    void* cPtr = _wrap_WBOperationData_SendTime_get([self getCptr]);
     SWIGTYPE_unsigned___int64* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_unsigned___int64 alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(void)setBGMd5: (NSString*)value
{
 _wrap_WBOperationData_BGMd5_set([self getCptr], value);
}

-(NSString*)getBGMd5
{
 {
    return _wrap_WBOperationData_BGMd5_get([self getCptr]);
  }
}

-(void)setOperation: (enum WBOperation)value
{
 _wrap_WBOperationData_Operation_set([self getCptr], (int)value);
}

-(enum WBOperation)getOperation
{
  return (enum WBOperation)_wrap_WBOperationData_Operation_get([self getCptr]); 
}

-(void)setItems: (SWIGTYPE_p_std__vectorT_AC__Talk__WBOperationItem_t*)value
{
 _wrap_WBOperationData_Items_set([self getCptr], [value getCptr]);
}

-(SWIGTYPE_p_std__vectorT_AC__Talk__WBOperationItem_t*)getItems
{
    void* cPtr = _wrap_WBOperationData_Items_get([self getCptr]);
     SWIGTYPE_p_std__vectorT_AC__Talk__WBOperationItem_t* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_p_std__vectorT_AC__Talk__WBOperationItem_t alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(id)init
{
 
	if((self = [super init])) {
		void* cptr = _wrap_new_WBOperationData();
        swigCPtr = cptr;
        swigCMemOwn = YES;
	}
	return self;

}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_WBOperationData((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end


@implementation ClassQuestion
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

-(void)setQuestionId: (SWIGTYPE_unsigned___int64*)value
{
 _wrap_ClassQuestion_QuestionId_set([self getCptr], [value getCptr]);
}

-(SWIGTYPE_unsigned___int64*)getQuestionId
{
    void* cPtr = _wrap_ClassQuestion_QuestionId_get([self getCptr]);
     SWIGTYPE_unsigned___int64* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_unsigned___int64 alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(void)setUserId: (SWIGTYPE_unsigned___int64*)value
{
 _wrap_ClassQuestion_UserId_set([self getCptr], [value getCptr]);
}

-(SWIGTYPE_unsigned___int64*)getUserId
{
    void* cPtr = _wrap_ClassQuestion_UserId_get([self getCptr]);
     SWIGTYPE_unsigned___int64* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_unsigned___int64 alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(void)setType: (enum QuestionType)value
{
 _wrap_ClassQuestion_Type_set([self getCptr], (int)value);
}

-(enum QuestionType)getType
{
  return (enum QuestionType)_wrap_ClassQuestion_Type_get([self getCptr]); 
}

-(void)setTitle: (NSString*)value
{
 _wrap_ClassQuestion_Title_set([self getCptr], value);
}

-(NSString*)getTitle
{
 {
    return _wrap_ClassQuestion_Title_get([self getCptr]);
  }
}

-(void)setContent: (NSString*)value
{
 _wrap_ClassQuestion_Content_set([self getCptr], value);
}

-(NSString*)getContent
{
 {
    return _wrap_ClassQuestion_Content_get([self getCptr]);
  }
}

-(void)setOptions: (SWIGTYPE_p_std__vectorT_std__string_t*)value
{
 _wrap_ClassQuestion_Options_set([self getCptr], [value getCptr]);
}

-(SWIGTYPE_p_std__vectorT_std__string_t*)getOptions
{
    void* cPtr = _wrap_ClassQuestion_Options_get([self getCptr]);
     SWIGTYPE_p_std__vectorT_std__string_t* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_p_std__vectorT_std__string_t alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(void)setCorrectOptions: (SWIGTYPE_p_std__vectorT_unsigned_char_t*)value
{
 _wrap_ClassQuestion_CorrectOptions_set([self getCptr], [value getCptr]);
}

-(SWIGTYPE_p_std__vectorT_unsigned_char_t*)getCorrectOptions
{
    void* cPtr = _wrap_ClassQuestion_CorrectOptions_get([self getCptr]);
     SWIGTYPE_p_std__vectorT_unsigned_char_t* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_p_std__vectorT_unsigned_char_t alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(id)init
{
 
	if((self = [super init])) {
		void* cptr = _wrap_new_ClassQuestion();
        swigCPtr = cptr;
        swigCMemOwn = YES;
	}
	return self;

}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_ClassQuestion((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end


@implementation ClassAnswer
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

-(void)setQuestionId: (unsigned long long)value
{
 _wrap_ClassAnswer_QuestionId_set([self getCptr], value);
}

-(unsigned long long)getQuestionId
{
  return _wrap_ClassAnswer_QuestionId_get([self getCptr]); 
}

-(void)setUserId: (SWIGTYPE_unsigned___int64*)value
{
 _wrap_ClassAnswer_UserId_set([self getCptr], [value getCptr]);
}

-(SWIGTYPE_unsigned___int64*)getUserId
{
    void* cPtr = _wrap_ClassAnswer_UserId_get([self getCptr]);
     SWIGTYPE_unsigned___int64* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_unsigned___int64 alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(void)setAnswerIdx: (SWIGTYPE_p_std__vectorT_unsigned_char_t*)value
{
 _wrap_ClassAnswer_AnswerIdx_set([self getCptr], [value getCptr]);
}

-(SWIGTYPE_p_std__vectorT_unsigned_char_t*)getAnswerIdx
{
    void* cPtr = _wrap_ClassAnswer_AnswerIdx_get([self getCptr]);
     SWIGTYPE_p_std__vectorT_unsigned_char_t* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_p_std__vectorT_unsigned_char_t alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(id)init
{
 
	if((self = [super init])) {
		void* cptr = _wrap_new_ClassAnswer();
        swigCPtr = cptr;
        swigCMemOwn = YES;
	}
	return self;

}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_ClassAnswer((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end


@implementation ACEventArgs
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

+(NSString*)TypeName
{
 {
    return _wrap_ACEventArgs_TypeName();
  }
}

-(unsigned int)Id
{
  return _wrap_ACEventArgs_Id([self getCptr]); 
}

-(BOOL)IsProcessed
{
  return _wrap_ACEventArgs_IsProcessed([self getCptr]); 
}

-(BOOL)MakeProcessed
{
  return _wrap_ACEventArgs_MakeProcessed([self getCptr]); 
}

-(NSString*)EventName
{
 {
    return _wrap_ACEventArgs_EventName([self getCptr]);
  }
}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_ACEventArgs((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end


@implementation ActionStateEventArgs
- (void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

-(void)setStatus: (enum ActionStatus)value
{
 _wrap_ActionStateEventArgs_Status_set([self getCptr], (int)value);
}

-(enum ActionStatus)getStatus
{
  return (enum ActionStatus)_wrap_ActionStateEventArgs_Status_get([self getCptr]); 
}

-(void)setToken: (SWIGTYPE_p_void*)value
{
 _wrap_ActionStateEventArgs_Token_set([self getCptr], [value getCptr]);
}

-(SWIGTYPE_p_void*)getToken
{
    void* cPtr = _wrap_ActionStateEventArgs_Token_get([self getCptr]);
     SWIGTYPE_p_void* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_p_void alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_ActionStateEventArgs((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end


@implementation ServiceManager
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

-(SWIGTYPE_p_AC__Talk__Service__ACService*)ACService
{
    void* cPtr = _wrap_ServiceManager_ACService([self getCptr]);
     SWIGTYPE_p_AC__Talk__Service__ACService* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_p_AC__Talk__Service__ACService alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(SWIGTYPE_p_AC__Talk__Service__ConfigService*)UAConfigService
{
    void* cPtr = _wrap_ServiceManager_UAConfigService([self getCptr]);
     SWIGTYPE_p_AC__Talk__Service__ConfigService* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_p_AC__Talk__Service__ConfigService alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(SWIGTYPE_p_AC__Talk__Service__ConfigService*)XmlConfigService
{
    void* cPtr = _wrap_ServiceManager_XmlConfigService([self getCptr]);
     SWIGTYPE_p_AC__Talk__Service__ConfigService* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_p_AC__Talk__Service__ConfigService alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(SWIGTYPE_p_AC__Talk__Service__CourseService*)CourseService
{
    void* cPtr = _wrap_ServiceManager_CourseService([self getCptr]);
     SWIGTYPE_p_AC__Talk__Service__CourseService* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_p_AC__Talk__Service__CourseService alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(SWIGTYPE_p_AC__Talk__Service__LogService*)LogService
{
    void* cPtr = _wrap_ServiceManager_LogService([self getCptr]);
     SWIGTYPE_p_AC__Talk__Service__LogService* ret = nil;
     if(cPtr) {
        ret = [[[SWIGTYPE_p_AC__Talk__Service__LogService alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_ServiceManager((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end


@implementation UITask
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

-(void)Execute
{
 _wrap_UITask_Execute([self getCptr]);
}

-(id)init
{
 
	if((self = [super init])) {
		void* cptr = _wrap_new_UITask();
        swigCPtr = cptr;
        swigCMemOwn = YES;
	}
	return self;

}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_UITask((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end


@implementation UserAgentCallback
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

-(void)DispatchEvent: (ACEventArgs*)eventArgs
{
 _wrap_UserAgentCallback_DispatchEvent([self getCptr], [eventArgs getCptr]);
}

-(void)ExecuteUITask: (UITask*)task
{
 _wrap_UserAgentCallback_ExecuteUITask([self getCptr], [task getCptr]);
}

-(id)init
{
 
	if((self = [super init])) {
		void* cptr = _wrap_new_UserAgentCallback();
        swigCPtr = cptr;
        swigCMemOwn = YES;
	}
	return self;

}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_UserAgentCallback((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end


@implementation UserAgentConfig
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

-(void)setCallback: (UserAgentCallback*)value
{
 _wrap_UserAgentConfig_Callback_set([self getCptr], [value getCptr]);
}

-(UserAgentCallback*)getCallback
{
    void* cPtr = _wrap_UserAgentConfig_Callback_get([self getCptr]);
     UserAgentCallback* ret = nil;
     if(cPtr) {
        ret = [[[UserAgentCallback alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

-(void)setXmlConfigPath: (NSString*)value
{
 _wrap_UserAgentConfig_XmlConfigPath_set([self getCptr], value);
}

-(NSString*)getXmlConfigPath
{
 {
    return _wrap_UserAgentConfig_XmlConfigPath_get([self getCptr]);
  }
}

-(id)init
{
 
	if((self = [super init])) {
		void* cptr = _wrap_new_UserAgentConfig();
        swigCPtr = cptr;
        swigCMemOwn = YES;
	}
	return self;

}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_UserAgentConfig((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end


@implementation UserAgent
-(void*)getCptr {
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject {
	if((self = [super init])) {
		swigCPtr = cptr;
        swigCMemOwn = ownCObject;
	}
	return self;
}

+(NSString*)getCKEY_UA_HOST
{
 {
    return _wrap_UserAgent_CKEY_UA_HOST_get();
  }
}

+(UserAgent*)CreateUserAgent: (UserAgentConfig*)config
{
    void* cPtr = _wrap_UserAgent_CreateUserAgent([config getCptr]);
     UserAgent* ret = nil;
     if(cPtr) {
        ret = [[[UserAgent alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}

+(void)ReleaseUserAgent: (UserAgent*)userAgent
{
 _wrap_UserAgent_ReleaseUserAgent([userAgent getCptr]);
}

-(ServiceManager*)ServiceManager
{
    void* cPtr = _wrap_UserAgent_ServiceManager([self getCptr]);
     ServiceManager* ret = nil;
     if(cPtr) {
        ret = [[[ServiceManager alloc] initWithCptr:cPtr swigOwnCObject:NO] autorelease];
     }
    return ret; 
}


-(void)dealloc{

  if (swigCPtr != NULL) {
    if (swigCMemOwn) {
        _wrap_delete_UserAgent((void*)swigCPtr);
        swigCMemOwn = NO;
    }
    swigCPtr = NULL;
  }
  [super dealloc];

}

@end

